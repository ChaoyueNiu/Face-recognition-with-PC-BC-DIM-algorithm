----------------------------------------------------------------------------
INTRODUCTION
----------------------------------------------------------------------------

This code implements the simulation results reported in:

   M. W. Spratling (in press.) A Hierarchical Predictive Coding Model of Object
   Recognition in Natural Images, Cognitive Computation, doi: 10.1007/s12559-016-9445-1

Please cite this paper if this code is used in, or to motivate, any publications. 

----------------------------------------------------------------------------
USAGE
----------------------------------------------------------------------------

This code was tested with MATLAB Version 9.0.0.341360 (R2016a) running on Ubuntu
Linux version 16.04.

Simulations may run faster if you install the MATLAB function convnfft 
written by Bruno Luong, which is available here:
http://www.mathworks.com/matlabcentral/fileexchange/24504-fft-based-convolution

The following MATLAB functions can be used to perfom the experiments described in the paper.

Fig. 2 can be reproduced using the command:

     classify_images('MNIST',4);

     Be warned this function requires about 25GB of free RAM to execute! If you
     don't have that much memory you can train a smaller network by using fewer
     training images, using the command: classify_images('MNISTXXXX',4); where
     XXXX=1000, 2000, 4000, or 5000. This number specifies the number of
     training images per class.

     To run this function you will need the MNIST dataset installed on your
     system, and you will need to edit the path in the file
     load_classify_image_dataset.m to point to the locations where this data is
     stored.


Fig. 3 can be reproduced using the command:

     classify_images('YALE1',1.25);

     To run this function you will need Extended Yale Face Database B installed
     on your system, and you will need to edit the path in the file
     load_classify_image_dataset.m to point to the locations where this data is
     stored.


Figs. 4 and 5 can be reproduced using the command:

     test_ismdim_cars(imageNum);

     where imageNum is the number of the image in the test set that is to be processed.
 
     The precision recall curve can then be generated by running:

     stats_ismdim_cars;

		 The previous two commands use the file ISMDIM_codebook_cars.mat which is
		 produced using the command:

		 ismdim_training('cars');

     To run this function you will need the UIUC cars dataset installed on your
     system, and you will need to edit the path in the file load_image_car.m to point
     to the locations where this data is stored.

Fig. 6 can be reproduced using the command:

     test_ismdim_carsScale(imageNum);

     where imageNum is the number of the image in the test set that is to be processed.

     The precision recall curve can then be generated by running:

     stats_ismdim_carsScale;

     The previous two commands use the file ISMDIM_codebook_carsScale.mat which
     is produced using the command:

     ismdim_training('carsScale');

     To run this function you will need the UIUC cars dataset installed on your
     system, and you will need to edit the path in the file load_image_car.m to point
     to the locations where this data is stored.


